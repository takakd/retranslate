// source: translator.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.translator.LangType', null, global)
goog.exportSymbol('proto.translator.TranslateRequest', null, global)
goog.exportSymbol('proto.translator.TranslateResponse', null, global)
goog.exportSymbol('proto.translator.TranslatedText', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.translator.TranslateRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.translator.TranslateRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.translator.TranslateRequest.displayName =
    'proto.translator.TranslateRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.translator.TranslateResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.translator.TranslateResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.translator.TranslateResponse.displayName =
    'proto.translator.TranslateResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.translator.TranslatedText = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.translator.TranslatedText, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.translator.TranslatedText.displayName =
    'proto.translator.TranslatedText'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.translator.TranslateRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.translator.TranslateRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.translator.TranslateRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.translator.TranslateRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        text: jspb.Message.getFieldWithDefault(msg, 1, ''),
        srclang: jspb.Message.getFieldWithDefault(msg, 2, 0),
        targetlang: jspb.Message.getFieldWithDefault(msg, 3, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.translator.TranslateRequest}
 */
proto.translator.TranslateRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.translator.TranslateRequest()
  return proto.translator.TranslateRequest.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.translator.TranslateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.translator.TranslateRequest}
 */
proto.translator.TranslateRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setText(value)
        break
      case 2:
        var value = /** @type {!proto.translator.LangType} */ (
          reader.readEnum()
        )
        msg.setSrclang(value)
        break
      case 3:
        var value = /** @type {!proto.translator.LangType} */ (
          reader.readEnum()
        )
        msg.setTargetlang(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.translator.TranslateRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.translator.TranslateRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.translator.TranslateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.translator.TranslateRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getText()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getSrclang()
  if (f !== 0.0) {
    writer.writeEnum(2, f)
  }
  f = message.getTargetlang()
  if (f !== 0.0) {
    writer.writeEnum(3, f)
  }
}

/**
 * optional string text = 1;
 * @return {string}
 */
proto.translator.TranslateRequest.prototype.getText = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.translator.TranslateRequest} returns this
 */
proto.translator.TranslateRequest.prototype.setText = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional LangType srcLang = 2;
 * @return {!proto.translator.LangType}
 */
proto.translator.TranslateRequest.prototype.getSrclang = function () {
  return /** @type {!proto.translator.LangType} */ (
    jspb.Message.getFieldWithDefault(this, 2, 0)
  )
}

/**
 * @param {!proto.translator.LangType} value
 * @return {!proto.translator.TranslateRequest} returns this
 */
proto.translator.TranslateRequest.prototype.setSrclang = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value)
}

/**
 * optional LangType targetLang = 3;
 * @return {!proto.translator.LangType}
 */
proto.translator.TranslateRequest.prototype.getTargetlang = function () {
  return /** @type {!proto.translator.LangType} */ (
    jspb.Message.getFieldWithDefault(this, 3, 0)
  )
}

/**
 * @param {!proto.translator.LangType} value
 * @return {!proto.translator.TranslateRequest} returns this
 */
proto.translator.TranslateRequest.prototype.setTargetlang = function (value) {
  return jspb.Message.setProto3EnumField(this, 3, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.translator.TranslateResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.translator.TranslateResponse.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.translator.TranslateResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.translator.TranslateResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        text: jspb.Message.getFieldWithDefault(msg, 1, ''),
        srclang: jspb.Message.getFieldWithDefault(msg, 2, 0),
        translatedtextlistMap: (f = msg.getTranslatedtextlistMap())
          ? f.toObject(
              includeInstance,
              proto.translator.TranslatedText.toObject
            )
          : [],
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.translator.TranslateResponse}
 */
proto.translator.TranslateResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.translator.TranslateResponse()
  return proto.translator.TranslateResponse.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.translator.TranslateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.translator.TranslateResponse}
 */
proto.translator.TranslateResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setText(value)
        break
      case 2:
        var value = /** @type {!proto.translator.LangType} */ (
          reader.readEnum()
        )
        msg.setSrclang(value)
        break
      case 3:
        var value = msg.getTranslatedtextlistMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            proto.translator.TranslatedText.deserializeBinaryFromReader,
            '',
            new proto.translator.TranslatedText()
          )
        })
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.translator.TranslateResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.translator.TranslateResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.translator.TranslateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.translator.TranslateResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getText()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getSrclang()
  if (f !== 0.0) {
    writer.writeEnum(2, f)
  }
  f = message.getTranslatedtextlistMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      3,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      proto.translator.TranslatedText.serializeBinaryToWriter
    )
  }
}

/**
 * optional string text = 1;
 * @return {string}
 */
proto.translator.TranslateResponse.prototype.getText = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.translator.TranslateResponse} returns this
 */
proto.translator.TranslateResponse.prototype.setText = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional LangType srcLang = 2;
 * @return {!proto.translator.LangType}
 */
proto.translator.TranslateResponse.prototype.getSrclang = function () {
  return /** @type {!proto.translator.LangType} */ (
    jspb.Message.getFieldWithDefault(this, 2, 0)
  )
}

/**
 * @param {!proto.translator.LangType} value
 * @return {!proto.translator.TranslateResponse} returns this
 */
proto.translator.TranslateResponse.prototype.setSrclang = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value)
}

/**
 * map<string, TranslatedText> translatedTextList = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.translator.TranslatedText>}
 */
proto.translator.TranslateResponse.prototype.getTranslatedtextlistMap =
  function (opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,!proto.translator.TranslatedText>} */ (
      jspb.Message.getMapField(
        this,
        3,
        opt_noLazyCreate,
        proto.translator.TranslatedText
      )
    )
  }

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.translator.TranslateResponse} returns this
 */
proto.translator.TranslateResponse.prototype.clearTranslatedtextlistMap =
  function () {
    this.getTranslatedtextlistMap().clear()
    return this
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.translator.TranslatedText.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.translator.TranslatedText.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.translator.TranslatedText} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.translator.TranslatedText.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        text: jspb.Message.getFieldWithDefault(msg, 1, ''),
        lang: jspb.Message.getFieldWithDefault(msg, 2, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.translator.TranslatedText}
 */
proto.translator.TranslatedText.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.translator.TranslatedText()
  return proto.translator.TranslatedText.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.translator.TranslatedText} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.translator.TranslatedText}
 */
proto.translator.TranslatedText.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setText(value)
        break
      case 2:
        var value = /** @type {!proto.translator.LangType} */ (
          reader.readEnum()
        )
        msg.setLang(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.translator.TranslatedText.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.translator.TranslatedText.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.translator.TranslatedText} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.translator.TranslatedText.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getText()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getLang()
  if (f !== 0.0) {
    writer.writeEnum(2, f)
  }
}

/**
 * optional string text = 1;
 * @return {string}
 */
proto.translator.TranslatedText.prototype.getText = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.translator.TranslatedText} returns this
 */
proto.translator.TranslatedText.prototype.setText = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional LangType lang = 2;
 * @return {!proto.translator.LangType}
 */
proto.translator.TranslatedText.prototype.getLang = function () {
  return /** @type {!proto.translator.LangType} */ (
    jspb.Message.getFieldWithDefault(this, 2, 0)
  )
}

/**
 * @param {!proto.translator.LangType} value
 * @return {!proto.translator.TranslatedText} returns this
 */
proto.translator.TranslatedText.prototype.setLang = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value)
}

/**
 * @enum {number}
 */
proto.translator.LangType = {
  UNKOWN: 0,
  JP: 1,
  EN: 2,
}

goog.object.extend(exports, proto.translator)
